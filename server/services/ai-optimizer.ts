import { Meeting } from '@shared/schema';
import { format } from 'date-fns';
import * as claudeAI from './claude-ai';

interface OptimizationSuggestion {
  type: 'duration' | 'schedule' | 'participants' | 'efficiency';
  suggestion: string;
  confidence: number;
  reasoning: string;
}

export class MeetingOptimizer {
  private getDayStats(meetings: Meeting[]): Record<string, number> {
    return meetings.reduce((acc: Record<string, number>, meeting) => {
      const day = format(new Date(meeting.date), 'EEEE');
      acc[day] = (acc[day] || 0) + 1;
      return acc;
    }, {});
  }

  private getTimeStats(meetings: Meeting[]): Record<string, number> {
    return meetings.reduce((acc: Record<string, number>, meeting) => {
      const hour = format(new Date(meeting.date), 'HH:00');
      acc[hour] = (acc[hour] || 0) + 1;
      return acc;
    }, {});
  }

  public async generateOptimizationSuggestions(meetings: Meeting[]): Promise<OptimizationSuggestion[]> {
    if (!meetings.length) {
      return [{
        type: 'efficiency',
        suggestion: 'Start scheduling meetings to receive AI-powered optimization suggestions',
        confidence: 1.0,
        reasoning: 'No meetings found in the system yet.'
      }];
    }

    try {
      // Use Claude AI for optimization suggestions instead of local AI
      const optimizationResult = await claudeAI.generateMeetingOptimizations(meetings);
      
      // Convert to the expected format
      const suggestions: OptimizationSuggestion[] = [];
      
      // Add schedule suggestions
      if (optimizationResult.scheduleSuggestions) {
        optimizationResult.scheduleSuggestions.forEach((suggestion: string) => {
          suggestions.push({
            type: 'schedule',
            suggestion,
            confidence: 0.85,
            reasoning: 'Generated by Claude AI based on meeting patterns analysis'
          });
        });
      }
      
      // Add duration suggestions
      if (optimizationResult.durationSuggestions) {
        optimizationResult.durationSuggestions.forEach((item: any) => {
          suggestions.push({
            type: 'duration',
            suggestion: `Meeting "${item.meetingId}" could be shortened to ${item.suggestedDuration} minutes`,
            confidence: 0.8,
            reasoning: item.reason
          });
        });
      }
      
      // Add efficiency tips
      if (optimizationResult.efficiencyTips) {
        optimizationResult.efficiencyTips.forEach((tip: string) => {
          suggestions.push({
            type: 'efficiency',
            suggestion: tip,
            confidence: 0.9,
            reasoning: 'Generated by Claude AI based on meeting content analysis'
          });
        });
      }
      
      return suggestions;
    } catch (error) {
      console.error('Error generating optimization suggestions with Claude:', error);
      throw new Error('Failed to generate AI optimization suggestions with Claude');
    }
  }
}

export const meetingOptimizer = new MeetingOptimizer();